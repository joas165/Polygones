{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","SXCoordinates","updateSXCoordinates","useState","sCoordinates","updateCoordinates","x_coordinate","y_coordinate","handleFormChange","index","event","data","target","name","value","submit","preventDefault","outputX","map","element","outputY","output","i","length","push","console","log","React","createElement","className","type","onClick","increaseEdges","splice","onSubmit","form","key","placeholder","onChange","width","height","points","fill","stroke","ReactDOM","createRoot","document","getElementById","render","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"6KAIA,MAAMA,EAAMA,KAEV,MAAOC,EAAeC,GAAuBC,mBAAS,KAC/CC,EAAcC,GAAqBF,mBAAS,CAAC,CAACG,aAAa,GAAIC,aAAc,MAE9EC,EAAmBA,CAACC,EAAOC,KAC/B,IAAIC,EAAO,IAAIP,GACfO,EAAKF,GAAOC,EAAME,OAAOC,MAAQH,EAAME,OAAOE,MAC9CT,EAAkBM,IAmBdI,EAAUL,IACdA,EAAMM,iBACN,IAAIL,EAAO,IAAIP,GACXa,EAAUN,EAAKO,IAAIC,GAAWA,EAAQb,cACtCc,EAAUT,EAAKO,IAAIC,GAAWA,EAAQZ,cACtCc,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAQM,OAAOD,IACjCD,EAAOG,KAAKP,EAAQK,IACpBD,EAAOG,KAAKJ,EAAQE,IAEtBjB,EAAkBD,GAClBF,EAAoBmB,GACpBI,QAAQC,IAAIzB,GACZwB,QAAQC,IAAItB,GACZqB,QAAQC,IAAIL,IAId,OACEM,IAAAC,cAAA,OAAKC,UAAU,OACZF,IAAAC,cAAA,UACCE,KAAS,oBACTC,QAAShB,GAAQ,QAEjBY,IAAAC,cAAA,UAAQE,KAAQ,oBAAqBC,QAxCrBC,KAMpB3B,EAAkB,IAAID,EALX,CACTE,aAAc,GACdC,aAAc,QAqCiD,aAC7DoB,IAAAC,cAAA,UAAQE,KAAQ,oBAAqBC,QAhCtBtB,IACnB,IAAIE,EAAO,IAAIP,GACfO,EAAKsB,OAAOxB,EAAO,GACnBJ,EAAkBM,KA6B6C,gBAC5DgB,IAAAC,cAAA,QAAMM,SAAUnB,GACdX,EAAac,IAAI,CAACiB,EAAM1B,IAE1BkB,IAAAC,cAAA,OAAKQ,IAAK3B,GACLkB,IAAAC,cAAA,SACEf,KAAK,eACLwB,YAAY,sBACZvB,MAAOqB,EAAK7B,aACZgC,SAAU5B,GAASF,EAAiBC,EAAMC,KAE5CiB,IAAAC,cAAA,SACEf,KAAK,eACLwB,YAAY,qBACZvB,MAAOqB,EAAK5B,aACZ+B,SAAU5B,GAASF,EAAiBC,EAAMC,QAKlDiB,IAAAC,cAAA,OAAKW,MAAM,OAAOC,OAAO,OACxBb,IAAAC,cAAA,WAASa,OAAQxC,EAAeyC,KAAM,OAAOC,OAAS,WAMhDC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAOrB,IAAAC,cAAC5B,EAAG,OAGDA,QC3EAiD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDN,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrB,IAAAC,cAACD,IAAMgC,WAAU,KACfhC,IAAAC,cAAC5B,EAAG,QAORiD,K","file":"static/js/main.ea3952a3.chunk.js","sourcesContent":["import {useState } from \"react\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nconst App = () => {\n  \n  const [SXCoordinates, updateSXCoordinates] = useState('');\n  const [sCoordinates, updateCoordinates] = useState([{x_coordinate:'', y_coordinate: ''}]);\n\n  const handleFormChange = (index, event) => {\n    let data = [...sCoordinates];\n    data[index][event.target.name] = event.target.value;\n    updateCoordinates(data);\n  }\n \n  const increaseEdges = () => {\n    let edge = {\n      x_coordinate: '',\n      y_coordinate: '',\n    }\n\n    updateCoordinates([...sCoordinates, edge]);\n  }\n  \n  const removeEdges = (index) => {\n    let data = [...sCoordinates];\n    data.splice(index, 1)\n    updateCoordinates(data)\n}\n  \n  \n  const submit = (event) => {\n    event.preventDefault();\n    let data = [...sCoordinates];\n    let outputX = data.map(element => element.x_coordinate);\n    let outputY = data.map(element => element.y_coordinate);\n    let output = [];\n    for (let i = 0; i < outputX.length;i++) { \n      output.push(outputX[i]);\n      output.push(outputY[i]); \n    }\n    updateCoordinates(sCoordinates);\n    updateSXCoordinates(output);\n    console.log(SXCoordinates);\n    console.log(sCoordinates);  \n    console.log(output);  \n  }\n\n  \n  return (\n    <div className=\"App\">\n       <button\n        type =  {\"position:absolute\"}\n        onClick={submit}>\n        Draw</button>\n        <button type = {\"position:absolute\"} onClick={increaseEdges}>Add Edges</button>\n        <button type = {\"position:absolute\"} onClick={removeEdges}>Remove Edges</button> \n       <form onSubmit={submit}>\n        {sCoordinates.map((form, index) => {\n          return (\n       <div key={index}>  \n            <input\n              name='x_coordinate'\n              placeholder='X-Coordinate 0-1000'\n              value={form.x_coordinate}\n              onChange={event => handleFormChange(index,event)}\n              />\n            <input\n              name='y_coordinate'\n              placeholder='Y-Coordinate 0-600'\n              value={form.y_coordinate}\n              onChange={event => handleFormChange(index,event)} />\n            \n        </div>\n        )})}\n        </form>  \n      <svg width=\"1000\" height=\"600\">\n       <polygon points={SXCoordinates} fill =\"none\" stroke = \"red\" />\n      </svg>  \n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}